==========Basic Object-Oriented Analysis and Design================= 
                      page 164-page 177

I’m going to describe a process to use when you want to build something using Python, speciﬁcally
with object-oriented programming (OOP). What I mean by a “process” is that I’ll give you a set of
steps that you do in order but that you aren’t meant to be a slave to and that might not always work for
every problem. They are just a good starting point for many programming problems and shouldn’t be
considered the only way to solve these types of problems. This process is just one way to do it that you
can follow.

The process is as follows:

1. Write or draw about the problem.
2. Extract key concepts from 1 and research them.
3. Create a class hierarchy and object map for the concepts.
4. Code the classes and a test to run them.
5. Repeat and reﬁne.

The way to look at this process is that it is “top down,” meaning it starts from the very abstract loose idea
and then slowly reﬁnes it until the idea is solid and something you can code.

I start by just writing about the problem and trying to think up anything I can about it. Maybe I’ll even
draw a diagram or two, maybe a map of some kind, or even write myself a series of emails describing
the problem. This gives me a way to express the key concepts in the problem and also explore what I
might already know about it.

Then I go through these notes, drawings, and descriptions, and I pull out the key concepts. There’s a
simple trick to doing this: I make a list of all the nouns and verbs in my writing and drawings, then write
out how they’re related. This gives me a good list of names for classes, objects, and functions in the
next step. I take this list of concepts and then research any that I don’t understand so I can reﬁne them
further if needed.

Once I have my list of concepts I create a simple outline/tree of the concepts and how they are related
as classes. I can usually take my list of nouns and start asking, “Is this one like other concept nouns?
That means they have a common parent class, so what is it called?” I keep doing this until I have a class
hierarchy that’s just a simple tree list or a diagram. Then I take the verbs I have and see if those are
function names for each class and put them in my tree.\

With this class hierarchy ﬁgured out, I sit down and write some basic skeleton code that has just the
classes, their functions, and nothing more. I then write a test that runs this code and makes sure the
classes I’ve made make sense and work right. Sometimes I may write the test ﬁrst, and other times
I might write a little test, a little code, a little test, and so on until I have the whole thing built.

Finally, I keep cycling over this process, repeating it and reﬁning as I go, and making it as clear as I can
before doing more implementation. If I get stuck at any particular part because of a concept or problem
I haven’t anticipated, then I sit down and start the process over on just that part to ﬁgure it out more
before continuing.

I will now go through this process while coming up with a game engine and a game for this exercise.
The Analysis of a Simple Game Engine
The game I want to make is called “Gothons from Planet Percal #25,” and it will be a small space
adventure game. With nothing more than that concept in my mind, I can explore the idea and ﬁgure out
how to make the game come to life.

*Write or Draw About the Problem
I’m going to write a little paragraph for the game:

“Aliens have invaded a space ship and our hero has to go through a maze of rooms defeating them so
he can escape into an escape pod to the planet below. The game will be more like a Zork or Adventure
type game with text outputs and funny ways to die. The game will involve an engine that runs a map full
of rooms or scenes. Each room will print its own description when the player enters it and then tell the
engine what room to run next out of the map.”

At this point I have a good idea for the game and how it would run, so now I want to describe each scene:

Death This is when the player dies and should be something funny.
Central Corridor This is the starting point and has a Gothon already standing there that the players
have to defeat with a joke before continuing.
Laser Weapon Armory This is where the hero gets a neutron bomb to blow up the ship before
getting to the escape pod. It has a keypad the hero has to guess the number for.
The Bridge This is another battle scene with a Gothon where the hero places the bomb.
Escape Pod This is where the hero escapes but only after guessing the right escape pod.

At this point I might draw out a map of these, maybe write more descriptions of each room—whatever
comes to mind as I explore the problem.

Extract Key Concepts and Research Them
I now have enough information to extract some of the nouns and analyze their class hierarchy. First I
make a list of all the nouns:

• Alien
• Player
• Ship
• Maze
• Room
• Scene
• Gothon
• Escape Pod
• Planet
• Map
• Engine
• Death
• Central Corridor
• Laser Weapon Armory
• The Bridge
I would also possibly go through all the verbs and see if any of them might be good function names, but
I’ll skip that for now.

At this point I might also research each of these concepts and anything I don’t know right now. For
example, I might play a few of these types of games and make sure I know how they work. I might
research how ships are designed or how bombs work. Maybe I’ll research some technical issue like how
to store the game’s state in a database. After I’ve done this research I might start over at step 1 based
on new information I have and rewrite my description and extract new concepts.

Create a Class Hierarchy and Object Map for the Concepts
Once I have that I turn it into a class hierarchy by asking, “What is similar to other things?” I also ask,
“What is basically just another word for another thing?”

Right away I see that “Room” and “Scene” are basically the same thing depending on how I want to
do things. I’m going to pick “Scene” for this game. Then I see that all the speciﬁc rooms, like “Central
Corridor,” are basically just Scenes. I see also that Death is basically a Scene, which conﬁrms my choice

of “Scene” over “Room,” since you can have a death scene, but a death room is kind of odd. “Maze” and
“Map” are basically the same, so I’m going to go with “Map” since I used it more often. I don’t want to
do a battle system, so I’m going to ignore “Alien” and “Player” and save that for later. The “Planet” could
also just be another scene instead of something speciﬁc.

After all of that thought process I start to make a class hierarchy that looks like this in my text editor:

* Map
* Engine
* Scene
* Death
* Central Corridor
* Laser Weapon Armory
* The Bridge
* Escape Pod

I then go through and ﬁgure out what actions are needed on each thing based on verbs in the description.
For example, I know from the description I’m going to need a way to “run” the engine, “get the next scene”
from the map, get the “opening scene,” and “enter” a scene. I’ll add those like this:

* Map
− next_scene
− opening_scene
* Engine
− play
* Scene
− enter
* Death
* Central Corridor
* Laser Weapon Armory
* The Bridge
* Escape Pod

Notice how I just put -enter under Scene since I know that all the scenes under it will inherit it and
have to override it later.

Repeat and Refine
The last step in my little process isn’t so much a step as it is a while-loop. You don’t ever do this as a
one-pass operation. Instead you go back over the whole process again and reﬁne it based on information
you’ve learned from later steps. Sometimes I’ll get to step 3 and realize that I need to work on 1 and 2
more, so I’ll stop and go back and work on those. Sometimes I’ll get a ﬂash of inspiration and jump to
the end to code up the solution in my head while I have it there, but then I’ll go back and do the previous
steps to make sure I cover all the possibilities I have.

The other idea in this process is that it’s not just something you do at one single level but something that
you can do at every level when you run into a particular problem. Let’s say I don’t know how to write the
Engine.play method yet. I can stop and do this whole process on just that one function to ﬁgure out
how to write it.
--------------------------------------------------------------------------------------------
Top Down versus Bottom Up
The process is typically labeled “top down” since it starts at the most abstract concepts (the top) and
works its way down to actual implementation. I want you to use this process I just described when
analyzing problems in the book from now on, but you should know that there’s another way to solve
problems in programming that starts with code and goes “up” to the abstract concepts. This other way
is labeled “bottom up.” Here are the general steps you follow to do this:

1. Take a small piece of the problem; hack on some code and get it to run barely.
2. Reﬁne the code into something more formal with classes and automated tests.
3. Extract the key concepts you’re using and research them.
4. Write a description of what’s really going on.
5. Go back and reﬁne the code, possibly throwing it out and starting over.
6. Repeat, moving on to some other piece of the problem.

I ﬁnd this process is better once you’re more solid at programming and are naturally thinking in code about
problems. This process is very good when you know small pieces of the overall puzzle, but maybe don’t
have enough information yet about the overall concept. Breaking it down in little pieces and exploring
with code then helps you slowly grind away at the problem until you’ve solved it. However, remember that
your solution will probably be meandering and weird, so that’s why my version of this process involves
going back and ﬁnding research, then cleaning things up based on what you’ve learned.
















